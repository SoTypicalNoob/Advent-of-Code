(defun make-monkeys ()
  (let ((monkeys (make-hash-table))
        (cur-mon ""))
    (with-open-file (stream "test")
      (loop :for line = (read-line stream nil nil)
            :while line
            :do (progn
                  (cond ((and (> (length line) 0) (equal (char line 0) #\M))
                         (setq line (remove #\: line))
                         (setq line (remove #\space line))
                         (setq cur-mon line)
                         (setf (gethash (read-from-string cur-mon) monkeys) (list)))
                        ((and (> (length line) 0) (equal (char line 2) #\S))
                         (setq line (remove #\, line))
                         (setf (gethash (read-from-string cur-mon) monkeys) (uiop:split-string (subseq line 18) :separator " ")))))))
    monkeys))

(defun one-round (monkeys)
  (let ((cur-mon "")
        (math "")
        (math-with "")
        (test-with "")
        (true-or-false "")
        (devisible 0)
        (true-throw "")
        (false-throw "")
        (one-item "")
        (temp-list (list)))
    (with-open-file (stream "test")
      (loop :for line = (read-line stream nil nil)
            :while line
            :do (progn
                  (cond ((and (> (length line) 0) (equal (char line 0) #\M))
                         (setq line (remove #\: line))
                         (setq line (remove #\space line))
                         (setq cur-mon line))
                        ((and (> (length line) 0) (equal (char line 2) #\O))
                         (setq math (first (uiop:split-string (subseq line 23) :separator " ")))
                         (setq math-with (second (uiop:split-string (subseq line 23) :separator " "))))
                        ((and (> (length line) 0) (equal (char line 2) #\T))
                         (setq devisible (read-from-string (subseq line 21))))
                        ((and (> (length line) 0) (equal (char line 10) #\e))
                         (setq line (subseq line 22))
                         (setq line (remove #\space line))
                         (setq true-throw (string-capitalize line)))
                        ((and (> (length line) 0) (equal (char line 10) #\s))
                         (setq line (subseq line 23))
                         (setq line (remove #\space line))
                         (setq false-throw (string-capitalize line)))
                        ((= (length line) 0)
                         (format t "~&~{~A~%~}~%" (list cur-mon math math-with devisible true-throw false-throw))
                         (loop :for i :from 1 :to (length (gethash (read-from-string cur-mon) monkeys))
                               :do (progn
                                     (setq one-item (pop (gethash (read-from-string cur-mon) monkeys)))
                                     (cond ((and (equal "*" math) (not (equal math-with "old")))
                                            (setq one-item (* one-item (read-from-string math-with)))
                                            (setq true-or-false (integerp (/ one-item test-with)))
                                            ;; set target monkey based on the true-or-false value.
                                            ))
                                     (setf (gethash ()))))
                         ;; here, iterate over the cur-mon-s items, one by one
                         ;; see some examples for push pop in hash table below
                         )))))
    ;; (setf (gethash 'Monkey1 monkeys) (append "54" (gethash 'Monkey1 monkeys)))
    (setq temp-list (gethash 'Monkey1 monkeys))
    (format t "Cur-mon: ~A~%" cur-mon)
    (setf (gethash 'Monkey1 monkeys) (append (list (pop (gethash 'Monkey0 monkeys))) temp-list))
    (loop :for value being the hash-values of monkeys
          :do (print value))))
